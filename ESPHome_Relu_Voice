substitutions:
  name: "esp-voice"
  friendly_name: "ESP VOICE"
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ap_ssid: "Esp voice"  
  wifi_ap_password: "password"
  external_media_player: "media_player.boxa_din_birou" # boxa pe care se dorește să se redea răspunsurile
  awake_sound: "media-source://media_source/assist_sounds/awake.wav"
  api_encription_key: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
  ota_password: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
  tts_service: "tts.edge_tts_say"
  

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  on_boot:
     - priority: -100
       then:
         - light.turn_on:
             id: led
             effect: "Slow Pulse"
             red: 100%
             green: 60%
             blue: 0%
         - wait_until:
             condition:
               wifi.connected:
         - light.turn_on:
             id: led
             effect: "Fast Pulse"
             red: 0%
             green: 100%
             blue: 0%
         - wait_until:
             condition:
               api.connected:
         - light.turn_on:
             id: led
             effect: none
             red: 0%
             green: 100%
             blue: 0%
         - delay: 1s
         - script.execute: reset_led
         - wait_until: api.connected
         - delay: 1s
         - if:
             condition:
               switch.is_on: use_wake_word
             then:
               - voice_assistant.start_continuous:

esp32:
  board: esp32dev
  framework:
    type: esp-idf


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ${api_encription_key}

ota:
  password: ${ota_password}

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${wifi_ap_ssid}"
    password: ${wifi_ap_password}
captive_portal:
improv_serial:
external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s


i2s_audio:
  i2s_lrclk_pin: GPIO15 # WS
  i2s_bclk_pin: GPIO4 # CK


microphone:
  - platform: i2s_audio
    id: board_microphone
    adc_type: external
    i2s_din_pin: GPIO16
    pdm: false
    channel: right



speaker:
  - platform: i2s_audio
    id: board_speaker
    dac_type: external
    i2s_dout_pin: GPIO26
    mode: mono

output:
  - platform: gpio
    pin:
      number: GPIO21
      inverted: true
    id: mute_pin
  - platform: ledc
    ######################################################
    # One buzzer leg connected to GPIO23, the other to GND
    ######################################################
#    pin: GPIO14
    pin: GPIO23
    id: buzzer


esp_adf:

voice_assistant:
  id: va
  microphone: board_microphone
  speaker: board_speaker
  use_wake_word: true
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  vad_threshold: 3
  on_wake_word_detected:
    - output.turn_on: buzzer
    - output.ledc.set_frequency:
         id: buzzer
         frequency: "800Hz"
    - output.set_level:
         id: buzzer
         level: "90%"
    - delay: 100ms
    - output.turn_off: buzzer
#    - switch.turn_off: use_wake_word
#    - voice_assistant.stop
#    - homeassistant.service:        
#        service: media_player.play_media
#        data:
#          entity_id: ${external_media_player}
#          media_content_id: ${awake_sound}
#          media_content_type: audio/mpeg 
#    - delay: 1100ms       
#    - voice_assistant.start
#    - delay: 200ms
#    - switch.turn_on: use_wake_word  
  on_listening:
    - output.turn_on: mute_pin
    - light.turn_on:
        id: led
        blue: 60%
        red: 0%
        green: 0%
        effect: "Slow Pulse"
  on_stt_vad_end:
    - light.turn_on:
        id: led
        blue: 60%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
  on_tts_start:
    - homeassistant.service:        
        service: tts.google_cloud
        data:          
          entity_id: ${external_media_player}
          message: !lambda return x;    
    - output.turn_off: mute_pin
    - light.turn_on:
        id: led
        blue: 0%
        red: 0%
        green: 100%
        brightness: 60%
        effect: none
  on_end:
    - delay: 100ms
    - wait_until:
        not:
          speaker.is_playing:
    - output.turn_on: mute_pin
    - script.execute: reset_led
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:

  on_error:
    - light.turn_on:
        id: led
        blue: 0%
        red: 100%
        green: 0%
        brightness: 60%
        effect: none
    - delay: 1s
    - script.execute: reset_led
  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop:
          - light.turn_off: led

esp32_touch:
  setup_mode: false

binary_sensor:
  - platform: esp32_touch
    pin: GPIO27
    name: Action
    threshold: 1480
    disabled_by_default: true
    on_click:
      - min_length: 20ms
        max_length: 900ms
        then:
        - if:
            condition:
              switch.is_off: use_wake_word
            then:
              - if:
                  condition: voice_assistant.is_running
                  then:
                    - voice_assistant.stop:
                    - script.execute: reset_led
                  else:
                    - voice_assistant.start:
            else:
              - voice_assistant.stop
              - delay: 1s
              - script.execute: reset_led
              - script.wait: reset_led
              - voice_assistant.start_continuous:

      - min_length: 1000ms
        max_length: 9000ms
        then:
          - switch.toggle: use_wake_word


light:
  - platform: esp32_rmt_led_strip
    rmt_channel: 0
    name: None
    id: led
    disabled_by_default: true
    pin: GPIO13
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 30%
          max_brightness: 60%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 30%
          max_brightness: 60%

script:
  - id: reset_led
    then:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - light.turn_on:
                id: led
                red: 100%
                green: 89%
                blue: 71%
                brightness: 30%
                effect: none
          else:
            - light.turn_off: led

switch:
  - platform: template
    name: Use wake word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      - script.execute: reset_led
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led


    
    
    
    
